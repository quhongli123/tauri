name: Build Linux ARM64

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu
          override: true
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libjavascriptcoregtk-4.0-dev
          
      - name: Install cross-compile arm64 packages
        run: |
          # 确保有 ARM64 架构支持
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev:arm64 libgtk-3-dev:arm64 libayatana-appindicator3-dev:arm64 libc6-dev:arm64
          
      - name: Configure cross compile environment
        run: |
          sudo mkdir -p /usr/lib/aarch64-linux-gnu/pkgconfig/
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build frontend
        run: pnpm build
        
      - name: Modify tauri.conf.json
        run: |
          # 修改 tauri.conf.json 设置目标格式
          sed -i 's/"targets": "all"/"targets": ["deb"]/' src-tauri/tauri.conf.json
          cat src-tauri/tauri.conf.json
      
      - name: Setup custom pkg-config
        run: |
          # 创建一个包装脚本来处理 pkg-config 调用
          cat > pkg-config-wrapper.sh << 'EOF'
          #!/bin/bash
          if [[ $1 == *"javascriptcoregtk-4.1"* || $1 == *"libsoup-3.0"* ]]; then
            # 对于这些特定包，提供一个虚拟的配置
            echo "-I/usr/include/aarch64-linux-gnu -L/usr/lib/aarch64-linux-gnu"
            exit 0
          fi
          # 否则调用真正的 pkg-config
          /usr/bin/pkg-config "$@"
          EOF
          
          chmod +x pkg-config-wrapper.sh
          sudo mv pkg-config-wrapper.sh /usr/local/bin/pkg-config-arm64
          echo "PKG_CONFIG=/usr/local/bin/pkg-config-arm64" >> $GITHUB_ENV
          
      - name: Install Tauri CLI
        run: cargo install tauri-cli
      
      - name: Build Linux ARM64 package
        run: |
          cd src-tauri
          # 配置 Cargo 使用交叉编译工具链
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' > ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
          
          # 设置环境变量
          export PKG_CONFIG_ALLOW_CROSS=1
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          
          # 尝试使用不同的方法构建
          RUSTFLAGS="-C link-args=-ljavascriptcoregtk-4.1" cargo tauri build --target aarch64-unknown-linux-gnu --verbose
      
      - name: Upload Linux ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-packages
          path: |
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb 